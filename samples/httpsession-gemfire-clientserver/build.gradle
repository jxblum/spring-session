apply from: JAVA_GRADLE
apply from: TOMCAT_7_GRADLE
apply plugin: "application"
apply from: SAMPLE_GRADLE

dependencies {
	compile project(':spring-session-data-gemfire'),
		"org.springframework:spring-web:$springVersion",
		"org.webjars:bootstrap:$bootstrapVersion",
		"org.webjars:webjars-taglib:$webjarsTaglibVersion",
		jstlDependencies

	providedCompile "javax.servlet:javax.servlet-api:$servletApiVersion"

	testCompile "junit:junit:$junitVersion"

	integrationTestCompile gebDependencies

	integrationTestRuntime "org.springframework.shell:spring-shell:1.0.0.RELEASE",
		"xml-apis:xml-apis:1.4.01"
}

mainClassName = "sample.ServerConfig"

def port
def process

task availablePort() << {
	def serverSocket = new ServerSocket(0)
	port = serverSocket.localPort
	serverSocket.close()
}

task runGemFireServer(dependsOn: availablePort) << {
	println 'STARTING GEMFIRE SERVER...'

	String classpath = sourceSets.main.runtimeClasspath.collect { it }.join(File.pathSeparator)

	String[] commandLine = ['java', '-server', '-ea',
							"-Dspring.session.data.gemfire.port=$port",
							"-Dsample.httpsession.gemfire.log-level="
								+ System.getProperty('sample.httpsession.gemfire.log-level', 'warning'),
							'-classpath', classpath, 'sample.ServerConfig']

	//println commandLine

	process = commandLine.execute()
	process.in.close()
	process.out.close()
	process.err.close()
}

integrationTest.doLast {
	println 'STOPPING GEMFIRE SERVER...'
	process?.destroyForcibly()
}

integrationTomcatRun {
	dependsOn runGemFireServer
	doFirst {
		System.setProperty("spring.session.data.gemfire.port", "$port");
	}
}
